{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","character","image","name","status","species","origin","location","CardList","characters","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","response","json","data","this","results","filteredcharacters","filter","toLowerCase","includes","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+WAGaA,G,kBAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,YAAYC,IAAMH,EAAMI,UAAUC,QACvC,gCAAOL,EAAMI,UAAUE,KAAvB,KACA,+BAAMN,EAAMI,UAAUG,OAAtB,KACA,+BAAMP,EAAMI,UAAUI,QAAtB,KACA,+BAAI,yCAAJ,IAA2BR,EAAMI,UAAUK,OAAOH,KAAlD,KACA,+BAAI,2CAAJ,IAA6BN,EAAMI,UAAUM,SAASJ,KAAtD,QCNKK,EAAW,SAAAX,GAAK,OAC1B,yBAAKC,UAAU,aACTD,EAAMY,WAAWC,IAAI,SAAAT,GAAS,OAC3B,kBAAC,EAAD,CAAMU,IAAKV,EAAUW,GAAIX,UAAWA,QCJnCY,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACMjB,UAAU,SACVkB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCLG,E,YAtCb,aAAe,IAAD,8BACZ,+CAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAdxB,EAAKC,MAAQ,CACXf,WAAY,GACZY,YAAa,IALH,E,uMASA,6C,SACWI,MADX,8C,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKT,SAAS,CAACX,WAAYmB,EAAKE,U,mIAQzB,IAAD,EAC8BD,KAAKL,MAAjCf,EADF,EACEA,WAAYY,EADd,EACcA,YACdU,EAAqBtB,EAAWuB,OAAO,SAAA/B,GAAS,OAClDA,EAAUE,KAAK8B,cAAcC,SAASb,EAAYY,iBAEtD,OACE,yBAAKnC,UAAU,OACb,8CACA,kBAAC,EAAD,CACEgB,YAAa,mBACbC,aAAec,KAAKd,eAEtB,kBAAC,EAAD,CAAUN,WAAYsB,S,GAjCZI,aCQEC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.542f25bf.chunk.js","sourcesContent":["import React from 'react';\nimport './card.component.css';\n\nexport const Card = props => (\n    <div className=\"card-container\">\n    <img alt=\"character\" src={ props.character.image }/>\n        <h2> { props.character.name } </h2>\n        <p> { props.character.status } </p>\n        <p> { props.character.species } </p>\n        <p> <span>Origin:</span> { props.character.origin.name } </p>\n        <p> <span>Location:</span> { props.character.location.name } </p>\n    </div>\n)","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from \"../card/card.component\"\n\nexport const CardList = props =>(\n   <div className=\"card-list\">\n        {props.characters.map(character => (\n            <Card key={character.id} character={character}/>\n        ))}\n   </div>\n)","import React from \"react\";\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n          className=\"search\"  \n          type=\"search\" \n          placeholder={placeholder}\n          onChange={handleChange}\n        />\n);","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from \"./components/card-list/card-list.component\"\nimport { SearchBox } from \"./components/search-box/search-box.component\"\nclass App extends Component {\n  constructor (){\n    super();\n\n    this.state = {\n      characters: [],\n      searchField: \"\"\n    };\n  }\n  async componentDidMount(){\n    const url = \"https://rickandmortyapi.com/api/character/\";\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({characters: data.results});\n  }\n\n  handleChange = (e) =>{\n    this.setState({\n      searchField: e.target.value\n   })\n  }\n  render(){\n    const { characters, searchField } = this.state;\n    const filteredcharacters = characters.filter(character =>\n        character.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return(\n      <div className=\"App\">\n        <h1>Rick and Morty</h1>\n        <SearchBox \n          placeholder={\"Search character\"}\n          handleChange={ this.handleChange } \n        />\n        <CardList characters={filteredcharacters}></CardList>\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}